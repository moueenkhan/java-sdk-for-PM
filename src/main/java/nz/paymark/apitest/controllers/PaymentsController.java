/*
 * PayMarkEFTPOSLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.paymark.apitest.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import nz.paymark.apitest.ApiHelper;
import nz.paymark.apitest.AuthManager;
import nz.paymark.apitest.Configuration;
import nz.paymark.apitest.DateTimeHelper;
import nz.paymark.apitest.exceptions.ApiException;
import nz.paymark.apitest.http.Headers;
import nz.paymark.apitest.http.client.HttpClient;
import nz.paymark.apitest.http.client.HttpContext;
import nz.paymark.apitest.http.request.HttpRequest;
import nz.paymark.apitest.http.response.HttpResponse;
import nz.paymark.apitest.http.response.HttpStringResponse;
import nz.paymark.apitest.models.DynamicResponse;
import nz.paymark.apitest.models.RefundReqBody;
import nz.paymark.apitest.models.RegularPaymentReqBody;
import nz.paymark.apitest.models.RegularPaymentResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PaymentsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public PaymentsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @param  accept  Required parameter: Example: application/vnd.paymark_api+json
     * @param  contentType  Required parameter: Example: application/vnd.paymark_api+json
     * @param  authorization  Required parameter: Example: Bearer kARcGkNy4mArFN1HZQ2INAJ5mFDw
     * @param  regularPaymentBody  Required parameter: Example:
     * @return    Returns the RegularPaymentResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RegularPaymentResponse createARegularPayment(
            final String accept,
            final String contentType,
            final String authorization,
            final RegularPaymentReqBody regularPaymentBody) throws ApiException, IOException {
        HttpRequest request = buildCreateARegularPaymentRequest(accept, contentType, authorization,
                regularPaymentBody);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateARegularPaymentResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example: application/vnd.paymark_api+json
     * @param  contentType  Required parameter: Example: application/vnd.paymark_api+json
     * @param  authorization  Required parameter: Example: Bearer kARcGkNy4mArFN1HZQ2INAJ5mFDw
     * @param  regularPaymentBody  Required parameter: Example:
     * @return    Returns the RegularPaymentResponse response from the API call
     */
    public CompletableFuture<RegularPaymentResponse> createARegularPaymentAsync(
            final String accept,
            final String contentType,
            final String authorization,
            final RegularPaymentReqBody regularPaymentBody) {
        return makeHttpCallAsync(() -> buildCreateARegularPaymentRequest(accept, contentType,
                authorization, regularPaymentBody),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateARegularPaymentResponse(context));
    }

    /**
     * Builds the HttpRequest object for createARegularPayment.
     */
    private HttpRequest buildCreateARegularPaymentRequest(
            final String accept,
            final String contentType,
            final String authorization,
            final RegularPaymentReqBody regularPaymentBody) throws JsonProcessingException, ApiException, IOException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/transaction/oepayment/");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Content-Type", contentType);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(regularPaymentBody);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createARegularPayment.
     * @return An object of type RegularPaymentResponse
     */
    private RegularPaymentResponse handleCreateARegularPaymentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        RegularPaymentResponse result = ApiHelper.deserialize(responseBody,
                RegularPaymentResponse.class);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example: application/vnd.paymark_api+json
     * @param  contentType  Required parameter: Example: application/vnd.paymark_api+json
     * @param  authorization  Required parameter: Example: Bearer kARcGkNy4mArFN1HZQ2INAJ5mFDw
     * @param  id  Required parameter: Example: 381a08c8-9189-4995-b07b-6c3821f70e35
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void getAutopayDetails(
            final String accept,
            final String contentType,
            final String authorization,
            final String id) throws ApiException, IOException {
        HttpRequest request = buildGetAutopayDetailsRequest(accept, contentType, authorization, id);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleGetAutopayDetailsResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example: application/vnd.paymark_api+json
     * @param  contentType  Required parameter: Example: application/vnd.paymark_api+json
     * @param  authorization  Required parameter: Example: Bearer kARcGkNy4mArFN1HZQ2INAJ5mFDw
     * @param  id  Required parameter: Example: 381a08c8-9189-4995-b07b-6c3821f70e35
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> getAutopayDetailsAsync(
            final String accept,
            final String contentType,
            final String authorization,
            final String id) {
        return makeHttpCallAsync(() -> buildGetAutopayDetailsRequest(accept, contentType,
                authorization, id),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetAutopayDetailsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAutopayDetails.
     */
    private HttpRequest buildGetAutopayDetailsRequest(
            final String accept,
            final String contentType,
            final String authorization,
            final String id) throws ApiException, IOException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oemerchanttrust/{id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("id",
                new SimpleEntry<Object, Boolean>(id, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Content-Type", contentType);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getAutopayDetails.
     * @return An object of type void
     */
    private Void handleGetAutopayDetailsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * @param  accept  Required parameter: Example: application/vnd.paymark_api+json
     * @param  contentType  Required parameter: Example: application/vnd.paymark_api+json
     * @param  authorization  Required parameter: Example: Bearer kARcGkNy4mArFN1HZQ2INAJ5mFDw
     * @param  refundReqBody  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void createARefund(
            final String accept,
            final String contentType,
            final String authorization,
            final RefundReqBody refundReqBody) throws ApiException, IOException {
        HttpRequest request = buildCreateARefundRequest(accept, contentType, authorization,
                refundReqBody);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleCreateARefundResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example: application/vnd.paymark_api+json
     * @param  contentType  Required parameter: Example: application/vnd.paymark_api+json
     * @param  authorization  Required parameter: Example: Bearer kARcGkNy4mArFN1HZQ2INAJ5mFDw
     * @param  refundReqBody  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> createARefundAsync(
            final String accept,
            final String contentType,
            final String authorization,
            final RefundReqBody refundReqBody) {
        return makeHttpCallAsync(() -> buildCreateARefundRequest(accept, contentType, authorization,
                refundReqBody),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateARefundResponse(context));
    }

    /**
     * Builds the HttpRequest object for createARefund.
     */
    private HttpRequest buildCreateARefundRequest(
            final String accept,
            final String contentType,
            final String authorization,
            final RefundReqBody refundReqBody) throws JsonProcessingException, ApiException, IOException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/transaction/oerefund/");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Content-Type", contentType);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(refundReqBody);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for createARefund.
     * @return An object of type void
     */
    private Void handleCreateARefundResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * @param  orderId  Required parameter: Example: 165
     * @param  merchantIdCode  Required parameter: Example: 301234567
     * @param  payerId  Required parameter: Example: 0215551234
     * @param  fromCreationTime  Required parameter: Example:
     * @param  toCreationTime  Required parameter: Example:
     * @param  fromActualSettlementDate  Required parameter: Example:
     * @param  toActualSettlementDate  Required parameter: Example:
     * @param  status  Required parameter: Example: AUTHORISED
     * @param  offset  Required parameter: Example: 0fe3085c-1f8a-4830-b587-f778d0f5340a
     * @param  limit  Required parameter: Example: 2
     * @param  accept  Required parameter: Example: application/vnd.paymark_api+json
     * @param  contentType  Required parameter: Example: application/vnd.paymark_api+json
     * @param  authorization  Required parameter: Example: Bearer 2qYLkfqqeDb77GkYcgW1eAaNpGvY
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse retrieveMultiplePayments(
            final int orderId,
            final int merchantIdCode,
            final int payerId,
            final LocalDateTime fromCreationTime,
            final LocalDateTime toCreationTime,
            final LocalDateTime fromActualSettlementDate,
            final LocalDateTime toActualSettlementDate,
            final String status,
            final String offset,
            final int limit,
            final String accept,
            final String contentType,
            final String authorization) throws ApiException, IOException {
        HttpRequest request = buildRetrieveMultiplePaymentsRequest(orderId, merchantIdCode, payerId,
                fromCreationTime, toCreationTime, fromActualSettlementDate, toActualSettlementDate,
                status, offset, limit, accept, contentType, authorization);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrieveMultiplePaymentsResponse(context);
    }

    /**
     * @param  orderId  Required parameter: Example: 165
     * @param  merchantIdCode  Required parameter: Example: 301234567
     * @param  payerId  Required parameter: Example: 0215551234
     * @param  fromCreationTime  Required parameter: Example:
     * @param  toCreationTime  Required parameter: Example:
     * @param  fromActualSettlementDate  Required parameter: Example:
     * @param  toActualSettlementDate  Required parameter: Example:
     * @param  status  Required parameter: Example: AUTHORISED
     * @param  offset  Required parameter: Example: 0fe3085c-1f8a-4830-b587-f778d0f5340a
     * @param  limit  Required parameter: Example: 2
     * @param  accept  Required parameter: Example: application/vnd.paymark_api+json
     * @param  contentType  Required parameter: Example: application/vnd.paymark_api+json
     * @param  authorization  Required parameter: Example: Bearer 2qYLkfqqeDb77GkYcgW1eAaNpGvY
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> retrieveMultiplePaymentsAsync(
            final int orderId,
            final int merchantIdCode,
            final int payerId,
            final LocalDateTime fromCreationTime,
            final LocalDateTime toCreationTime,
            final LocalDateTime fromActualSettlementDate,
            final LocalDateTime toActualSettlementDate,
            final String status,
            final String offset,
            final int limit,
            final String accept,
            final String contentType,
            final String authorization) {
        return makeHttpCallAsync(() -> buildRetrieveMultiplePaymentsRequest(orderId, merchantIdCode,
                payerId, fromCreationTime, toCreationTime, fromActualSettlementDate,
                toActualSettlementDate, status, offset, limit, accept, contentType, authorization),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleRetrieveMultiplePaymentsResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveMultiplePayments.
     */
    private HttpRequest buildRetrieveMultiplePaymentsRequest(
            final int orderId,
            final int merchantIdCode,
            final int payerId,
            final LocalDateTime fromCreationTime,
            final LocalDateTime toCreationTime,
            final LocalDateTime fromActualSettlementDate,
            final LocalDateTime toActualSettlementDate,
            final String status,
            final String offset,
            final int limit,
            final String accept,
            final String contentType,
            final String authorization) throws ApiException, IOException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/transaction/oepayment/");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("orderId", orderId);
        queryParameters.put("merchantIdCode", merchantIdCode);
        queryParameters.put("payerId", payerId);
        queryParameters.put("fromCreationTime", DateTimeHelper.toRfc8601DateTime(fromCreationTime));
        queryParameters.put("toCreationTime", DateTimeHelper.toRfc8601DateTime(toCreationTime));
        queryParameters.put("fromActualSettlementDate", DateTimeHelper.toRfc8601DateTime(fromActualSettlementDate));
        queryParameters.put("toActualSettlementDate", DateTimeHelper.toRfc8601DateTime(toActualSettlementDate));
        queryParameters.put("status", status);
        queryParameters.put("offset", offset);
        queryParameters.put("limit", limit);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Content-Type", contentType);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for retrieveMultiplePayments.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleRetrieveMultiplePaymentsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}