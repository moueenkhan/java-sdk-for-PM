/*
 * PayMarkEFTPOSLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.paymark.apitest.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import nz.paymark.apitest.ApiHelper;
import nz.paymark.apitest.AuthManager;
import nz.paymark.apitest.Configuration;
import nz.paymark.apitest.exceptions.ApiException;
import nz.paymark.apitest.exceptions.OAuthProviderException;
import nz.paymark.apitest.http.Headers;
import nz.paymark.apitest.http.client.HttpClient;
import nz.paymark.apitest.http.client.HttpContext;
import nz.paymark.apitest.http.request.HttpRequest;
import nz.paymark.apitest.http.response.HttpResponse;
import nz.paymark.apitest.http.response.HttpStringResponse;
import nz.paymark.apitest.models.OAuthToken;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OAuthAuthorizationController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public OAuthAuthorizationController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Create a new OAuth 2 token.
     * @param  authorization  Required parameter: Authorization header in Basic auth format
     * @param  scope  Optional parameter: Requested scopes as a space-delimited list.
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the OAuthToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OAuthToken createRequestToken(
            final String authorization,
            final String scope,
            final Map<String, Object> fieldParameters) throws ApiException, IOException {
        HttpRequest request = buildCreateRequestTokenRequest(authorization, scope, fieldParameters);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateRequestTokenResponse(context);
    }

    /**
     * Create a new OAuth 2 token.
     * @param  authorization  Required parameter: Authorization header in Basic auth format
     * @param  scope  Optional parameter: Requested scopes as a space-delimited list.
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
     * @return    Returns the OAuthToken response from the API call
     */
    public CompletableFuture<OAuthToken> createRequestTokenAsync(
            final String authorization,
            final String scope,
            final Map<String, Object> fieldParameters) {
        return makeHttpCallAsync(() -> buildCreateRequestTokenRequest(authorization, scope,
                fieldParameters),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCreateRequestTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for createRequestToken.
     */
    private HttpRequest buildCreateRequestTokenRequest(
            final String authorization,
            final String scope,
            final Map<String, Object> fieldParameters) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bearer/");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("grant_type", "client_credentials");
        formParameters.put("scope", scope);
        formParameters.putAll(fieldParameters);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        return request;
    }

    /**
     * Processes the response for createRequestToken.
     * @return An object of type OAuthToken
     */
    private OAuthToken handleCreateRequestTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new OAuthProviderException("OAuth 2 provider returned an error.", context);
        }
        if (responseCode == 401) {
            throw new OAuthProviderException("OAuth 2 provider says client authentication failed.",
                    context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        OAuthToken result = ApiHelper.deserialize(responseBody,
                OAuthToken.class);

        return result;
    }

}