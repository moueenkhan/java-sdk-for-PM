/*
 * PayMarkEFTPOSLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.paymark.apitest;

import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import nz.paymark.apitest.controllers.AuthController;
import nz.paymark.apitest.controllers.OAuthAuthorizationController;
import nz.paymark.apitest.controllers.PaymentsController;
import nz.paymark.apitest.http.client.HttpClient;
import nz.paymark.apitest.http.client.HttpClientConfiguration;
import nz.paymark.apitest.http.client.OkClient;
import nz.paymark.apitest.http.client.ReadonlyHttpClientConfiguration;
import nz.paymark.apitest.models.OAuthToken;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class PayMarkEFTPOSClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private AuthController auth;
    private PaymentsController payments;
    private OAuthAuthorizationController oAuthAuthorization;

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * ClientCredentialsAuthManager.
     */
    private ClientCredentialsAuthManager clientCredentialsAuthManager;

    /**
     * Map of authentication Managers.
     */
    private Map<String, AuthManager> authManagers;

    private PayMarkEFTPOSClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig, String oAuthClientId,
            String oAuthClientSecret, OAuthToken oAuthToken,
            Map<String, AuthManager> authManagers) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;

        this.authManagers = (authManagers == null) ? new HashMap<>() : new HashMap<>(authManagers);
        if (this.authManagers.containsKey("global")) {
            this.clientCredentialsAuthManager =
                    (ClientCredentialsAuthManager) this.authManagers.get("global");
        }

        if (!this.authManagers.containsKey("global")
                || !getClientCredentialsAuth().equals(oAuthClientId, oAuthClientSecret,
                        oAuthToken)) {
            this.clientCredentialsAuthManager = new ClientCredentialsAuthManager(oAuthClientId,
                    oAuthClientSecret, oAuthToken, this, httpClient);
            this.authManagers.put("global", clientCredentialsAuthManager);
        }

        auth = new AuthController(this, this.httpClient, this.authManagers);
        payments = new PaymentsController(this, this.httpClient, this.authManagers);
        oAuthAuthorization = new OAuthAuthorizationController(this, this.httpClient,
                this.authManagers);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of AuthController.
     * @return auth
     */
    public AuthController getAuthController() {
        return auth;
    }

    /**
     * Get the instance of PaymentsController.
     * @return payments
     */
    public PaymentsController getPaymentsController() {
        return payments;
    }

    /**
     * Get the instance of OAuthAuthorizationController.
     * @return oAuthAuthorization
     */
    public OAuthAuthorizationController getOAuthAuthorizationController() {
        return oAuthAuthorization;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with ClientCredentialsAuth.
     * @return clientCredentialsAuth
     */
    public ClientCredentialsAuth getClientCredentialsAuth() {
        return clientCredentialsAuthManager;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }

    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.SANDBOX)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://apitest.paymark.nz/";
            }
        }
        return "https://apitest.paymark.nz/";
    }

    /**
     * Converts this PayMarkEFTPOSClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PayMarkEFTPOSClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authManagers=" + authManagers + "]";
    }

    /**
     * Builds a new {@link PayMarkEFTPOSClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link PayMarkEFTPOSClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.oAuthClientId = getClientCredentialsAuth().getOAuthClientId();
        builder.oAuthClientSecret = getClientCredentialsAuth().getOAuthClientSecret();
        builder.oAuthToken = getClientCredentialsAuth().getOAuthToken();
        builder.authManagers = authManagers;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link PayMarkEFTPOSClient}.
     */
    public static class Builder {

        private Environment environment = Environment.SANDBOX;
        private HttpClient httpClient;
        private String oAuthClientId = "TODO: Replace";
        private String oAuthClientSecret = "TODO: Replace";
        private OAuthToken oAuthToken = null;
        private Map<String, AuthManager> authManagers = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for ClientCredentialsAuth.
         * @param oAuthClientId String value for oAuthClientId.
         * @param oAuthClientSecret String value for oAuthClientSecret.
         * @return Builder
         */
        public Builder clientCredentialsAuthCredentials(String oAuthClientId,
                String oAuthClientSecret) {
            if (oAuthClientId == null) {
                throw new NullPointerException("OAuthClientId cannot be null.");
            }
            if (oAuthClientSecret == null) {
                throw new NullPointerException("OAuthClientSecret cannot be null.");
            }
            this.oAuthClientId = oAuthClientId;
            this.oAuthClientSecret = oAuthClientSecret;
            return this;
        }

        /**
         * Credentials setter for ClientCredentialsAuth.
         * @param oAuthToken OAuthToken value for oAuthToken.
         * @return Builder
         */
        public Builder oAuthToken(OAuthToken oAuthToken) {
            this.oAuthToken = oAuthToken;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new PayMarkEFTPOSClient object using the set fields.
         * @return PayMarkEFTPOSClient
         */
        public PayMarkEFTPOSClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig);

            return new PayMarkEFTPOSClient(environment, httpClient, httpClientConfig, oAuthClientId,
                    oAuthClientSecret, oAuthToken, authManagers);
        }
    }
}